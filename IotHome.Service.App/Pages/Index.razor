@page "/"
@using System.Globalization
@using Blazorise.Components;
@using IotHome.Service.App.Models
@using IotHome.Service.App.Services.Interfaces
@using IotHome.Service.Model
@using IotHome.Service.App.Pages.Components;
@inject IReadingsNotifier ReadingsNotifier;
@inject IReadingsService ReadingsService;
@implements IDisposable;

<Spinner @ref="_spinner" />

<div class="card-columns">
    @foreach (var readingByPlace in _readingsByPlace)
    {
        <Card>
            <CardBody>
                <CardTitle Size="5">@readingByPlace.Key</CardTitle>
                <CardText>
                    @foreach (var reading in readingByPlace.Value)
                    {
                        <div class="reading-type">@reading.Key.Type</div>
                        <div class="reading-value">@reading.Value.Value?.ToString("00.0")</div>
                        <div class="reading-unit">@GetUnit(reading.Key)</div>
                    }
                </CardText>
            </CardBody>
        </Card>
    }
</div>

@code {
    private Spinner _spinner;

    private IDictionary<string, Dictionary<SensorDetails, SensorReading>> _readingsByPlace = new Dictionary<string, Dictionary<SensorDetails, SensorReading>>();

    protected override void OnInitialized()
    {
        ReadingsNotifier.NewReadingsAppeared += OnNewReadingsAppeared;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshDetails();
        }
    }

    public void Dispose()
    {
        ReadingsNotifier.NewReadingsAppeared -= OnNewReadingsAppeared;
    }

    private static string GetUnit(SensorDetails details)
    {
        switch (details.Type)
        {
            case "temperature":
                return "°C";
            case "humidity":
                return "%";
            default:
                return string.Empty;
        }
    }

    private async Task OnNewReadingsAppeared(SensorDetails sensor, SensorReading reading)
    {
        await InvokeAsync(async () =>
        {
            await RefreshDetails();
        });
    }

    private async Task RefreshDetails()
    {
        using (_spinner.ShowSpinner())
        {
            var readings = await ReadingsService.GetLatestReadingsAsync();
            _readingsByPlace = readings.GroupBy(r => r.Key.Name).ToDictionary(r => r.Key, r => r.ToDictionary(x => x.Key, x => x.Value));

            StateHasChanged();
        }
    }
}
