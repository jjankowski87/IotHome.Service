@using Blazorise.Charts;
@using Blazorise.Components;
@using IotHome.Service.App.Models
@using IotHome.Service.App.Services.Interfaces
@using IotHome.Service.Model
@inject IReadingsService ReadingsService;

<div>
    <div class="line-selector">
        @foreach (var (data, color) in _chartData.Zip(Colors))
        {
            <span class="@color.Name">
                <CheckEdit IsInline="true" Checked="@data.Key.IsChecked" Cursor="@Cursor.Pointer" CheckedChanged="@(async check => await OnChartLineCheckChanged(check, data.Key))">@data.Key.Value.Type - @data.Key.Value.Name</CheckEdit>
            </span>
        }
    </div>

    <LineChart @ref="_lineChart" TItem="decimal?" OptionsJsonString="@Options" />
</div>

@code {
    private static readonly string Options = "{\"legend\":{\"display\": false}}";
    private static readonly IList<MyChartColor> Colors = new[]
    {
        new MyChartColor("red", 255, 99, 132),
        new MyChartColor("blue", 54, 162, 235),
        new MyChartColor("yellow", 255, 206, 86),
        new MyChartColor("navy", 75, 192, 192),
        new MyChartColor("purple", 153, 102, 255),
        new MyChartColor("orange", 255, 159, 64)
    };

    private IDictionary<CheckboxValue<SensorDetails>, IList<SensorReading>> _chartData = new Dictionary<CheckboxValue<SensorDetails>, IList<SensorReading>>();
    private LineChart<decimal?> _lineChart;

    [CascadingParameter]
    public Spinner Spinner { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshChartDataAsync();
        }
    }

    private async Task OnChartLineCheckChanged(bool check, CheckboxValue<SensorDetails> checkboxValue)
    {
        var checkbox = _chartData.FirstOrDefault(cd => cd.Key.Value.Equals(checkboxValue.Value)).Key;
        if (checkbox != null)
        {
            checkbox.IsChecked = check;
        }
        
        await RefreshChartDataAsync();
    }

    public async Task ShowChart(DateTime from, DateTime to)
    {
        using (Spinner.ShowSpinner())
        {
            var selection = _chartData.Keys.ToList();

            var readings = await ReadingsService.GetReadingsAsync(from, to);
            _chartData = readings.ToDictionary(kv => new CheckboxValue<SensorDetails>(kv.Key,
                selection.FirstOrDefault(s => s.Value.Equals(kv.Key))?.IsChecked ?? true), kv => kv.Value);

            await RefreshChartDataAsync();
        }
    }

    private async Task RefreshChartDataAsync()
    {
        _lineChart.Clear();

        if (_chartData.Any(cd => cd.Key.IsChecked))
        {
            AddLabels(_chartData.First().Value.Select(r => r.Date));

            var i = 0;
            foreach (var (key, readings) in _chartData)
            {
                if (key.IsChecked)
                {
                    AddData(readings.Select(r => r.Value), $"{key.Value.Type} - {key.Value.Name}", Colors.Skip(i % Colors.Count).First());
                }

                i++;
            }
        }
        else
        {
            AddLabels(Enumerable.Empty<DateTimeOffset>());
            AddData(Enumerable.Empty<decimal?>(), string.Empty, Colors.First());
        }

        await _lineChart.Update();
    }

    private void AddLabels(IEnumerable<DateTimeOffset> labels)
    {
        _lineChart.AddLabel(labels.Select(l => l.ToString("yyyy-MM-dd HH:mm")).ToArray());
    }

    private void AddData(IEnumerable<decimal?> data, string header, MyChartColor color)
    {
        _lineChart.AddDataSet(new LineChartDataset<decimal?>
        {
            Label = header,
            Data = data.ToList(),
            BackgroundColor = new List<string> { color.Fill },
            BorderColor = new List<string> { color.Border },
            Fill = true,
            PointRadius = 2,
            BorderDash = new List<int>()
        });
    }
}
