@using Blazorise.Charts;
@using IotHome.Service.App.Models

<LineChart @ref="_lineChart" TItem="decimal?" OptionsJsonString="@Options" />

@code {
    private static readonly ChartColor DefaultColor = ChartColor.FromRgba(128, 128, 128, 0.2f);
    private static readonly string Options = "{\"legend\":{\"display\": false}}";

    private LineChart<decimal?> _lineChart;

    [Parameter]
    public ChartData ChartData { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshChartAsync(ChartData);
        }
    }

    public async Task RefreshChartAsync(ChartData chartData = null)
    {
        if (chartData != null)
        {
            ChartData = chartData;
        }

        _lineChart.Clear();

        AddLabels(ChartData.Labels);

        if (ChartData.IsAnySelected)
        {
            foreach (var (sensorName, readings) in ChartData.SelectedReadings)
            {
                AddData(readings.Values, sensorName, readings.Color);
            }
        }
        else
        {
            AddData(Enumerable.Empty<decimal?>(), string.Empty);
        }

        await _lineChart.Update();
    }

    private void AddLabels(IEnumerable<string> labels)
    {
        _lineChart.AddLabel(labels.ToArray());
    }

    private void AddData(IEnumerable<decimal?> data, string header, MyChartColor color = null)
    {
        _lineChart.AddDataSet(new LineChartDataset<decimal?>
        {
            Label = header,
            Data = data.ToList(),
            BackgroundColor = new List<string> { color?.Fill ?? DefaultColor },
            BorderColor = new List<string> { color?.Border ?? DefaultColor },
            Fill = true,
            PointRadius = 2,
            BorderDash = new List<int>()
        });
    }
}
