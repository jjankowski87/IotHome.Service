@page "/history"
@using Blazorise.Components;
@using IotHome.Service.App.Models
@using IotHome.Service.App.Services.Interfaces
@using IotHome.Service.Model
@using IotHome.Service.App.Pages.Components;
@using IotHome.Service.App.Utils
@inject IReadingsNotifier ReadingsNotifier;
@inject IDateTimeProvider DateTimeProvider;
@implements IDisposable;

<Spinner @ref="_spinner" />
<CascadingValue Value="_spinner">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12">
                <div class="select-filter-type">
                    <CheckEdit RadioGroup="filterType" Checked="@IsRelativeChecked" Cursor="@Cursor.Pointer" CheckedChanged="@(check => OnFilterTypeChanged(check, FilterType.Relative))">Relative</CheckEdit>
                    <CheckEdit RadioGroup="filterType" Checked="@IsAbsoluteChecked" Cursor="@Cursor.Pointer" CheckedChanged="@(check => OnFilterTypeChanged(check, FilterType.Absolute))">Absolute</CheckEdit>
                </div>

                @if (IsAbsoluteChecked)
                {
                    <div class="filter-by-date">
                        <span>from</span>
                        <DateTimeField @bind-DateTime="_from" />
                        <span>to</span>
                        <DateTimeField @bind-DateTime="_to" />
                        <Button Color="Color.Info" Clicked="@OnFilterClicked">Filter</Button>
                    </div>
                }

                @if (IsRelativeChecked)
                {
                    <div class="filter-by-time">
                        <span>last</span>
                        <SelectList Data="@_relativeOptions" TextField="@(item => item.Text)" ValueField="@(item => item.Value)" SelectedValueChanged="@OnRelativeTimeChanged" />
                        <Button Color="Color.Info" Clicked="@OnFilterClicked">Filter</Button>
                    </div>
                }
            </div>
        </div>
        <div class="row justify-content-center">
            <HistoryCharts @ref="_historyCharts" />
        </div>
    </div>
</CascadingValue>

@code {
    private static readonly IList<SelectValue<int>> _relativeOptions = new[]
    {
        new SelectValue<int>(60, "1h"), new SelectValue<int>(120, "2h"), new SelectValue<int>(240, "4h"),
        new SelectValue<int>(480, "8h"), new SelectValue<int>(720, "12h"), new SelectValue<int>(1440, "24h")
    };

    private Spinner _spinner;
    private HistoryCharts _historyCharts;

    private int _relativeMinutes = _relativeOptions.First().Value;
    private FilterType _filterType = FilterType.Relative;
    private DateTime _from = DateTime.Today;
    private DateTime _to = DateTime.Today.AddDays(1);

    private bool IsAbsoluteChecked => _filterType == FilterType.Absolute;
    private bool IsRelativeChecked => _filterType == FilterType.Relative;

    protected override void OnInitialized()
    {
        ReadingsNotifier.NewReadingsAppeared += OnNewReadingsAppeared;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Force refresh spinner to child components
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        ReadingsNotifier.NewReadingsAppeared -= OnNewReadingsAppeared;
    }

    private async Task OnNewReadingsAppeared(SensorDetails sensor, SensorReading reading)
    {
        await InvokeAsync(async () =>
        {
            if (reading.Date >= _from && reading.Date <= _to)
            {
                await OnFilterClicked();
            }
        });
    }

    private async Task OnFilterClicked()
    {
        // TODO: set max window size (maybe 1 week)
        if (IsAbsoluteChecked && _to >= _from)
        {
            await _historyCharts.ShowCharts(_from, _to);
            return;
        }

        if (IsRelativeChecked)
        {
            var now = DateTimeProvider.Now.UtcDateTime;
            await _historyCharts.ShowCharts(now.AddMinutes(-_relativeMinutes), now);
        }
    }

    private void OnFilterTypeChanged(bool check, FilterType filterType)
    {
        if (check)
        {
            _filterType = filterType;
        }
    }

    private void OnRelativeTimeChanged(object newValue)
    {
        _relativeMinutes = int.Parse(newValue.ToString());
    }
}
